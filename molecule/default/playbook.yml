- name: Converge
  hosts: all
  become: True
  roles:
    - role: role-ssh
  vars:

    # Will template /etc/ssh/sshd_config.d/ansible.conf
    ssh_sshd_config:
      AllowAgentForwarding: 'no'
      AllowGroups: 'root vagrant'
      AllowTcpForwarding: 'no'
      AllowUsers: 'root vagrant'
      ChallengeResponseAuthentication: 'no'
      GatewayPorts: 'no'
      GSSAPIAuthentication: 'no'
      HostbasedAuthentication: 'no'
      HostKey:
        - /etc/ssh/ssh_host_ed25519_key
        - /etc/ssh/ssh_host_rsa_key
      IgnoreRhosts: 'yes'
      ListenAddress: 0.0.0.0
      PasswordAuthentication: 'no'
      PermitEmptyPasswords: 'no'
      PermitRootLogin: 'prohibit-password'
      PermitTunnel: 'no'
      PermitUserEnvironment: 'no'
      PubkeyAuthentication: 'yes'
      X11Forwarding: 'no'

    # Will template /etc/ssh/ssh_config.d/ansible.conf
    ssh_ssh_config:
      '*':
        SendEnv: 'LANG LC_*'
        HashKnownHosts: 'yes'
        GSSAPIAuthentication: 'yes'


    # Manage linux users and their ssh settings
    ssh_users:

        # name of the (existing if create is not True) user
      - name: root

        # Create the user and its group if it is not present
        # Requires: group (default: name), home, uid and gid (default: uid)
        create: True

        # State of this user (present or absent, default: present)
        # State absent will remove the user and its group, however it will not delete the home directory
        state: present

        # Ansible is to retarded to determine a users home directory, hence...
        home: /root

        # name of the users primary group (for templating files) (Default: "name")
        group: root

        # Groups to put this user in
        # Note that the users own group will always be added to the list of groups, so you don't have to specify it here
        groups:
          - games

        # Append groups to already present groups of this user or enforce listed groups, default: True
        append: False

        # User and group ID
        uid: "0"
        gid: "0"

        # Weather to make this a system user and group, default: True
        system: False

        # Specify login shell
        shell: /bin/bash

        # Give this user a nice default ~/.bashrc, default: False
        bashrc: True

        # Create /home/user/.bashrc.d/test.sh
        bashrc_templates:
          - name: test
            content: |
              alias foo=bar

        # Generate a ed25519 keypair, default: False
        generate_keypair: True

        # Setup key=value environment variables in ~/.ssh/environment
        environment:
          SOME: VARIABLE

        # Manage $HOME/.ssh/config
        config:
          sat.github.com:
            HostName: 'github.com'
            User: git
            IdentityFile: '~/.ssh/id_ed25519'
            IdentitiesOnly: 'yes'

        # Accept host keys to known_hosts
        known_hosts:
          - github.com
          - gitlab.com

        # Pull a ssh public key from another instance and put it into authorized_keys
        remote_authorized_keys:
            # Ansible hostname
          - host: bullseye
            # Where to find the public key on this host
            path: /root/.ssh/id_ed25519.pub

        # Populate authorized_keys
        authorized_keys:
          # - key: https://github.com/charlie.keys
          #   options: 'no-port-forwarding,from="10.0.1.1"'
          # - key: "{{ lookup('file', '/home/charlie/.ssh/id_rsa.pub') }}"
          #   # present or absent, default: present
          #   state: present
          - key: "ssh-ed25519 AAAABCDEFG u.name@example.com"



      # Minimal config - just add a public key to ssh authorized_keys of an existing user
      - name: backuppc
        home: /var/lib/backuppc
        authorized_keys:
          - key: "ssh-ed25519 AAAABCDEFG u.name@example.com"



  # Only for molecule
  pre_tasks:

    - name: add group backuppc
      group:
        name: backuppc

    - name: add user backuppc
      user:
        name: backuppc
        group: backuppc
        home: /var/lib/backuppc
